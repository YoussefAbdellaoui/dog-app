{"version":3,"sources":["components/FavouriteDog.tsx","components/ui/Spinner.tsx","components/ui/Picture.tsx","components/Dog.tsx","components/Nav.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FavouriteDog","favouriteDogs","removeFav","id","className","map","dog","src","alt","onClick","e","Spinner","icon","faSpinner","Picture","currentDog","loading","Dog","useState","Object","newDog","setNewDog","setLoading","dogArray","setDogArray","favDogArray","setFavDogArray","prevDogError","setPrevDogError","favDogError","setFavDogError","getDog","a","fetch","response","json","data","console","error","fetchDog","message","length","splice","favDog","find","element","prevDog","previousDogIndex","indexOf","useEffect","nextDogIndex","filter","currentTarget","Nav","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.187942e5.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface FavouriteDogProps {\n  favouriteDogs: Array<string>;\n  removeFav(e: React.MouseEvent<HTMLImageElement>): void;\n}\n\nconst FavouriteDog: React.FC<FavouriteDogProps> = ({\n  favouriteDogs,\n  removeFav,\n}) => {\n  return (\n    <section id=\"favourite\">\n      <h1 className=\"header__title favourite__title\">\n        <span className=\"pink\">Favourite</span> Dogs\n      </h1>\n\n      <div className=\"dog__fav\">\n        {favouriteDogs.map((dog) => (\n          <figure key={dog} className=\"dog__fav--wrapper\">\n            <img\n              src={dog}\n              alt=\"\"\n              className=\"dog__img dog__fav--img\"\n              onClick={(e) => removeFav(e)}\n            />\n          </figure>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default FavouriteDog;\n","import { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"dog__img--loading\">\n      <FontAwesomeIcon icon={faSpinner} className=\"spinner\" />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport Spinner from \"./Spinner\";\n\ninterface Props {\n  currentDog: string;\n  loading: boolean;\n}\n\nconst Picture: React.FC<Props> = ({ currentDog, loading }) => {\n  return (\n    <div className=\"dog__img--wrapper\">\n      {/* If we're not loading then show the dog, otherwise show the spinner animation */}\n      {!loading ? (\n        <img src={currentDog} alt=\"\" className=\"dog__img dog__main\" />\n      ) : (\n        <Spinner />\n      )}\n    </div>\n  );\n};\n\nexport default Picture;\n","import React, { useEffect, useState } from \"react\";\nimport FavouriteDog from \"./FavouriteDog\";\nimport Picture from \"./ui/Picture\";\n\nconst Dog = () => {\n  // Generic dog state used to display the current dog\n  const [newDog, setNewDog] = useState(Object);\n\n  // Loading state\n  const [loading, setLoading] = useState<boolean>(true);\n\n  // Array states for keeping track of dogs & favourite dogs\n  const [dogArray, setDogArray] = useState<string[]>([]);\n  const [favDogArray, setFavDogArray] = useState<string[]>([]);\n\n  // Error states for showing in the UI\n  const [prevDogError, setPrevDogError] = useState(false);\n  const [favDogError, setFavDogError] = useState(false);\n\n  // Query the API for a dog\n  const getDog = async () => {\n    try {\n      const response = await fetch(\"https://dog.ceo/api/breeds/image/random\");\n      const data = await response.json();\n      return data;\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // Fetch a new dog from the API\n  const fetchDog = async () => {\n    // Show loading state on screen\n    setLoading(true);\n\n    const dog = await getDog();\n    setNewDog(dog.message);\n\n    // Check if there are 10 dogs stored in the array & remove the first index\n    if (dogArray.length > 10) {\n      // Remove the first index from the array\n      setDogArray(dogArray.splice(0, 1));\n\n      // Add the current dog to the array\n      setDogArray([...dogArray, dog.message]);\n      setLoading(false);\n      return;\n    }\n\n    // Otherwise just add the current dog to the array\n    setDogArray([...dogArray, dog.message]);\n    setLoading(false);\n  };\n\n  const favDog = () => {\n    // Check if the favourite dog already exists in the array\n    const checkFav = favDogArray.find((element) => newDog === element);\n    // If we find the current dog in the array already then disable the button\n    if (checkFav) {\n      setFavDogError(true);\n      return;\n    }\n\n    // Disable the favourite button once we add it to the array\n    setFavDogError(true);\n\n    // Add the dog to the favourite dog array\n    setFavDogArray([...favDogArray, newDog]);\n  };\n\n  const removeFav = (e: React.MouseEvent<HTMLImageElement>) => {\n    // e.currentTarget.src\n    setFavDogArray(favDogArray.filter((dog) => dog !== e.currentTarget.src));\n\n    // Remove the disabled button if the favourite removed is the current dog\n    if (e.currentTarget.src === newDog) {\n      setFavDogError(false);\n    }\n  };\n\n  // Get the previous dog on \"previous\" button press\n  const prevDog = () => {\n    // Get the index of the previous dog\n    const previousDogIndex = dogArray.indexOf(newDog) - 1;\n\n    // If we're below the index of 0 then show that there is no previous dog\n    if (previousDogIndex < 0) {\n      setPrevDogError(true);\n      return;\n    }\n\n    // Remove the the favDogError from the UI if it exists\n    if (favDogError) {\n      setFavDogError(false);\n    }\n\n    // Otherwise set the previous dog to the current dog so we can show it on screen\n    setNewDog(dogArray[previousDogIndex]);\n  };\n\n  // Get a new dog on \"next\" button press\n  const nextDog = () => {\n    // Remove the the prevDogError from the UI if it exists\n    if (prevDogError) {\n      setPrevDogError(false);\n    }\n\n    // Remove the the favDogError from the UI if it exists\n    if (favDogError) {\n      setFavDogError(false);\n    }\n\n    // Get the index of the next dog\n    const nextDogIndex = dogArray.indexOf(newDog) + 1;\n\n    // If the next index exists we've already fetched a dog, therefore set it to the current dog\n    if (nextDogIndex in dogArray) {\n      return setNewDog(dogArray[nextDogIndex]);\n    }\n\n    // Otherwise just fetch a new dog\n    fetchDog();\n  };\n\n  // Load the dog on initial page load\n  useEffect(() => {\n    fetchDog();\n  }, []);\n\n  return (\n    <>\n      <section id=\"dog\">\n        <h1 className=\"header__title\">\n          The best place to find your next <span className=\"pink\">Dog.</span>\n        </h1>\n\n        <div className=\"dog--wrapper\">\n          <div className=\"fav__btn--wrapper\">\n            {favDogError ? (\n              <>\n                <button className=\"btn--disabled btn--fav\" onClick={favDog}>\n                  Favourite\n                </button>\n                <span className=\"error fav__error\">\n                  Favourite already exists!\n                </span>\n              </>\n            ) : (\n              <button className=\"btn btn--fav\" onClick={favDog}>\n                Favourite\n              </button>\n            )}\n          </div>\n\n          <div className=\"dog__main\">\n            <div className=\"previous\">\n              <div className=\"previous--wrapper\">\n                {prevDogError ? (\n                  <>\n                    <button\n                      className=\"btn--disabled btn--prev\"\n                      onClick={prevDog}\n                    >\n                      Previous\n                    </button>\n                    <span className=\"error previous__error\">\n                      No Previous Dog!\n                    </span>\n                  </>\n                ) : (\n                  <button className=\"btn btn--prev\" onClick={prevDog}>\n                    Previous\n                  </button>\n                )}\n              </div>\n            </div>\n\n            <div className=\"picture\">\n              {<Picture currentDog={newDog} loading={loading} />}\n            </div>\n\n            <div className=\"next\">\n              <div className=\"next--wrapper\">\n                <button className=\"btn btn--next\" onClick={nextDog}>\n                  Next\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <div className=\"separator\"></div>\n      <FavouriteDog favouriteDogs={favDogArray} removeFav={removeFav} />\n    </>\n  );\n};\n\nexport default Dog;\n","import React from \"react\";\n\nconst Nav = () => {\n  return (\n    <nav>\n      <a href=\"/\" className=\"nav__logo\">\n        🐶\n      </a>\n      <ul className=\"nav__links\">\n        <li className=\"nav__list\">\n          <a href=\"/\" className=\"nav__list--link\">\n            About\n          </a>\n        </li>\n        <li className=\"nav__list\">\n          <a href=\"/\" className=\"nav__list--link\">\n            Contact\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport Dog from \"./components/Dog\";\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <header>\n        <Dog />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}